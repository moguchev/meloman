syntax = "proto3";

package github.moguchev.meloman;


import "google/api/annotations.proto";
import "google/api/http.proto";
import "google/api/httpbody.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/moguchev/meloman/pkg/api/meloman";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
	info: {
        description: "Сервис предоставляет REST API для работы с БД меломан."
		title: "Курсовая работа по курсу БСБД ИУ8-81 МГТУ им. Н. Э. Баумана 2021г.";
		version: "1.0.0";
		contact: {
			name: "Leonid Moguchev";
			url: "https://github.com/moguchev";
			email: "abracadabra.14@mail.ru";
		};
		license: {
			name: "MIT License";
			url: "https://raw.githubusercontent.com/moguchev/meloman/main/LICENSE";
		};
	};
    host: "localhost:80"
	external_docs: {
		url: "https://github.com/moguchev/meloman";
		description: "ТЗ";
	}
	schemes: HTTP;
	schemes: HTTPS;
	consumes: "application/json";
	produces: "application/json";
	security_definitions: {
		security: {
			key: "ApiKeyAuth";
			value: {
				type: TYPE_API_KEY;
				in: IN_HEADER;
				name: "grpc-metadata-authorization";
				extensions: {
					key: "x-amazon-apigateway-authorizer";
					value {
						struct_value {
							fields {
								key: "type";
								value {
									string_value: "token";
								}
							}
							fields {
								key: "authorizerResultTtlInSeconds";
								value {
									number_value: 1800;
								}
							}
						}
					}
				}
			}
		}
	}
};

service Meloman {

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_tag) = {
		description: "Сервис-интерфейс к БД меломан"
		external_docs: {
			url: "https://github.com/grpc-ecosystem/grpc-gateway";
			description: "Find out more about EchoService";
		}
	};

    // проверка работоспособности сервиса
    //
    // access: *
    rpc Ping(google.protobuf.Empty) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/ping"
        };
    }

    // авторизация
    //
    // access: *
    rpc Auth(AuthRequest) returns(AuthResponse) {
        option (google.api.http) = {
            post: "/api/v1/auth",
            body: "credentials"
        };
    }

    // создание пользователя/регистрация
    //
    // access: *
    rpc CreateUser(CreateUserRequest) returns (CreateUserResponse) {
        option (google.api.http) = {
            post: "/api/v1/users",
            body: "credentials"
        };
    }

    // получение пользователя по id
    //
    // access: user, admin
    rpc GetUserByID(GetUserByIDRequest) returns (GetUserByIDResponse) {
        option (google.api.http) = {
            get: "/api/v1/users/{id}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
			security: {
				security_requirement: {
					key: "ApiKeyAuth";
					value: {}
				}
			}
		};
    }

    // получение всех пользователей
    //
    // access: user, admin
    rpc GetUsers(GetUsersRequest) returns (GetUsersResponse) {
        option (google.api.http) = {
            get: "/api/v1/users"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
			security: {
				security_requirement: {
					key: "ApiKeyAuth";
					value: {}
				}
			}
		};
    }

    // изменение роли пользователя
    //
    // access: admin
    rpc UpdateUserRole(UpdateUserRoleRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/api/v1/users/{id}/role"
            body: "role"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
			security: {
				security_requirement: {
					key: "ApiKeyAuth";
					value: {}
				}
			}
		};
    }
}

message Credentials {
    // логин
    string login = 1 [(google.api.field_behavior) = REQUIRED];
    // пароль
    string password = 2 [(google.api.field_behavior) = REQUIRED];
}

message CreateUserRequest {
    // логин и пароль
    Credentials credentials = 1 [(google.api.field_behavior) = REQUIRED];
}

message CreateUserResponse {
    // id созданного пользователя
    string id = 1;
}

message AuthRequest {
    // логин и пароль
    Credentials credentials = 1 [(google.api.field_behavior) = REQUIRED];
}

message AuthResponse {
    // id авторизированного пользователя
    string id = 1;
}

message GetUserByIDRequest {
    // id пользователя
    string id = 1 [(google.api.field_behavior) = REQUIRED];
}

enum Role {
    // пользователь
    USER = 0;
    // администратор
    ADMIN = 1;
}

message User {
    // логин
    string login = 1;
    // время регистрации пользователя
    google.protobuf.Timestamp created_at = 2;
    // время последнего изменения пользователя
    google.protobuf.Timestamp updated_at = 3;
    // роль пользователя
    Role role = 4;
    // ID пользователя
    string id = 5;
}

message GetUserByIDResponse {
    // пользователь
    User user = 1;
}

message GetUsersRequest {
    // число пользователей в одном ответе, по уполномочию 100
    uint32 limit = 1;
    // сдвиг в списке пользователй
    uint32 offset = 2;
}

message GetUsersResponse {
    // всего пользователей
    uint32 total = 1;
    // текущий ответ
    repeated User users = 2;
}

message UpdateUserRoleRequest {
    // id пользователя
    string id = 1 [(google.api.field_behavior) = REQUIRED];
    // роль
    Role role = 2 [(google.api.field_behavior) = REQUIRED];
}