// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package meloman

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MelomanClient is the client API for Meloman service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MelomanClient interface {
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type melomanClient struct {
	cc grpc.ClientConnInterface
}

func NewMelomanClient(cc grpc.ClientConnInterface) MelomanClient {
	return &melomanClient{cc}
}

func (c *melomanClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/github.moguchev.meloman.Meloman/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MelomanServer is the server API for Meloman service.
// All implementations must embed UnimplementedMelomanServer
// for forward compatibility
type MelomanServer interface {
	Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedMelomanServer()
}

// UnimplementedMelomanServer must be embedded to have forward compatible implementations.
type UnimplementedMelomanServer struct {
}

func (UnimplementedMelomanServer) Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedMelomanServer) mustEmbedUnimplementedMelomanServer() {}

// UnsafeMelomanServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MelomanServer will
// result in compilation errors.
type UnsafeMelomanServer interface {
	mustEmbedUnimplementedMelomanServer()
}

func RegisterMelomanServer(s grpc.ServiceRegistrar, srv MelomanServer) {
	s.RegisterService(&Meloman_ServiceDesc, srv)
}

func _Meloman_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MelomanServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.moguchev.meloman.Meloman/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MelomanServer).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Meloman_ServiceDesc is the grpc.ServiceDesc for Meloman service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Meloman_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.moguchev.meloman.Meloman",
	HandlerType: (*MelomanServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Meloman_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "meloman/meloman.proto",
}
