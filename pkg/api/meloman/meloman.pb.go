// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.2
// source: meloman/meloman.proto

package meloman

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	_ "google.golang.org/genproto/googleapis/api/httpbody"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Role int32

const (
	// пользователь
	Role_USER Role = 0
	// администратор
	Role_ADMIN Role = 1
)

// Enum value maps for Role.
var (
	Role_name = map[int32]string{
		0: "USER",
		1: "ADMIN",
	}
	Role_value = map[string]int32{
		"USER":  0,
		"ADMIN": 1,
	}
)

func (x Role) Enum() *Role {
	p := new(Role)
	*p = x
	return p
}

func (x Role) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Role) Descriptor() protoreflect.EnumDescriptor {
	return file_meloman_meloman_proto_enumTypes[0].Descriptor()
}

func (Role) Type() protoreflect.EnumType {
	return &file_meloman_meloman_proto_enumTypes[0]
}

func (x Role) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Role.Descriptor instead.
func (Role) EnumDescriptor() ([]byte, []int) {
	return file_meloman_meloman_proto_rawDescGZIP(), []int{0}
}

type Credentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// логин
	Login string `protobuf:"bytes,1,opt,name=login,proto3" json:"login,omitempty"`
	// пароль
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *Credentials) Reset() {
	*x = Credentials{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meloman_meloman_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Credentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Credentials) ProtoMessage() {}

func (x *Credentials) ProtoReflect() protoreflect.Message {
	mi := &file_meloman_meloman_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Credentials.ProtoReflect.Descriptor instead.
func (*Credentials) Descriptor() ([]byte, []int) {
	return file_meloman_meloman_proto_rawDescGZIP(), []int{0}
}

func (x *Credentials) GetLogin() string {
	if x != nil {
		return x.Login
	}
	return ""
}

func (x *Credentials) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type CreateUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// логин и пароль
	Credentials *Credentials `protobuf:"bytes,1,opt,name=credentials,proto3" json:"credentials,omitempty"`
}

func (x *CreateUserRequest) Reset() {
	*x = CreateUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meloman_meloman_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserRequest) ProtoMessage() {}

func (x *CreateUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_meloman_meloman_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserRequest.ProtoReflect.Descriptor instead.
func (*CreateUserRequest) Descriptor() ([]byte, []int) {
	return file_meloman_meloman_proto_rawDescGZIP(), []int{1}
}

func (x *CreateUserRequest) GetCredentials() *Credentials {
	if x != nil {
		return x.Credentials
	}
	return nil
}

type CreateUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id созданного пользователя
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateUserResponse) Reset() {
	*x = CreateUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meloman_meloman_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserResponse) ProtoMessage() {}

func (x *CreateUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_meloman_meloman_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserResponse.ProtoReflect.Descriptor instead.
func (*CreateUserResponse) Descriptor() ([]byte, []int) {
	return file_meloman_meloman_proto_rawDescGZIP(), []int{2}
}

func (x *CreateUserResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type AuthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// логин и пароль
	Credentials *Credentials `protobuf:"bytes,1,opt,name=credentials,proto3" json:"credentials,omitempty"`
}

func (x *AuthRequest) Reset() {
	*x = AuthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meloman_meloman_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthRequest) ProtoMessage() {}

func (x *AuthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_meloman_meloman_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthRequest.ProtoReflect.Descriptor instead.
func (*AuthRequest) Descriptor() ([]byte, []int) {
	return file_meloman_meloman_proto_rawDescGZIP(), []int{3}
}

func (x *AuthRequest) GetCredentials() *Credentials {
	if x != nil {
		return x.Credentials
	}
	return nil
}

type AuthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id авторизированного пользователя
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *AuthResponse) Reset() {
	*x = AuthResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meloman_meloman_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthResponse) ProtoMessage() {}

func (x *AuthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_meloman_meloman_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthResponse.ProtoReflect.Descriptor instead.
func (*AuthResponse) Descriptor() ([]byte, []int) {
	return file_meloman_meloman_proto_rawDescGZIP(), []int{4}
}

func (x *AuthResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetUserByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id пользователя
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetUserByIDRequest) Reset() {
	*x = GetUserByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meloman_meloman_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserByIDRequest) ProtoMessage() {}

func (x *GetUserByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_meloman_meloman_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserByIDRequest.ProtoReflect.Descriptor instead.
func (*GetUserByIDRequest) Descriptor() ([]byte, []int) {
	return file_meloman_meloman_proto_rawDescGZIP(), []int{5}
}

func (x *GetUserByIDRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// логин
	Login string `protobuf:"bytes,1,opt,name=login,proto3" json:"login,omitempty"`
	// время регистрации пользователя
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// время последнего изменения пользователя
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// роль пользователя
	Role Role `protobuf:"varint,4,opt,name=role,proto3,enum=github.moguchev.meloman.Role" json:"role,omitempty"`
	// ID пользователя
	Id string `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meloman_meloman_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_meloman_meloman_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_meloman_meloman_proto_rawDescGZIP(), []int{6}
}

func (x *User) GetLogin() string {
	if x != nil {
		return x.Login
	}
	return ""
}

func (x *User) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *User) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *User) GetRole() Role {
	if x != nil {
		return x.Role
	}
	return Role_USER
}

func (x *User) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetUserByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// пользователь
	User *User `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *GetUserByIDResponse) Reset() {
	*x = GetUserByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meloman_meloman_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserByIDResponse) ProtoMessage() {}

func (x *GetUserByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_meloman_meloman_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserByIDResponse.ProtoReflect.Descriptor instead.
func (*GetUserByIDResponse) Descriptor() ([]byte, []int) {
	return file_meloman_meloman_proto_rawDescGZIP(), []int{7}
}

func (x *GetUserByIDResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type GetUsersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// число пользователей в одном ответе, по уполномочию 100
	Limit *uint32 `protobuf:"varint,1,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	// сдвиг в списке пользователй
	Offset *uint32 `protobuf:"varint,2,opt,name=offset,proto3,oneof" json:"offset,omitempty"`
}

func (x *GetUsersRequest) Reset() {
	*x = GetUsersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meloman_meloman_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUsersRequest) ProtoMessage() {}

func (x *GetUsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_meloman_meloman_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUsersRequest.ProtoReflect.Descriptor instead.
func (*GetUsersRequest) Descriptor() ([]byte, []int) {
	return file_meloman_meloman_proto_rawDescGZIP(), []int{8}
}

func (x *GetUsersRequest) GetLimit() uint32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *GetUsersRequest) GetOffset() uint32 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

type GetUsersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// всего пользователей
	Total uint32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// текущий ответ
	Users []*User `protobuf:"bytes,2,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *GetUsersResponse) Reset() {
	*x = GetUsersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meloman_meloman_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUsersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUsersResponse) ProtoMessage() {}

func (x *GetUsersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_meloman_meloman_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUsersResponse.ProtoReflect.Descriptor instead.
func (*GetUsersResponse) Descriptor() ([]byte, []int) {
	return file_meloman_meloman_proto_rawDescGZIP(), []int{9}
}

func (x *GetUsersResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetUsersResponse) GetUsers() []*User {
	if x != nil {
		return x.Users
	}
	return nil
}

type UpdateUserRoleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// uuid пользователя
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// роль
	Role *UpdateUserRoleRequest_Value `protobuf:"bytes,2,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *UpdateUserRoleRequest) Reset() {
	*x = UpdateUserRoleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meloman_meloman_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserRoleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserRoleRequest) ProtoMessage() {}

func (x *UpdateUserRoleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_meloman_meloman_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserRoleRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserRoleRequest) Descriptor() ([]byte, []int) {
	return file_meloman_meloman_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateUserRoleRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateUserRoleRequest) GetRole() *UpdateUserRoleRequest_Value {
	if x != nil {
		return x.Role
	}
	return nil
}

type CreateArtistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// имя исполнителя/группы
	FullName string `protobuf:"bytes,1,opt,name=full_name,json=fullName,proto3" json:"full_name,omitempty"`
	// биография
	Biography *string `protobuf:"bytes,2,opt,name=biography,proto3,oneof" json:"biography,omitempty"`
	// base64 encoded image
	Image *string `protobuf:"bytes,3,opt,name=image,proto3,oneof" json:"image,omitempty"`
}

func (x *CreateArtistRequest) Reset() {
	*x = CreateArtistRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meloman_meloman_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateArtistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateArtistRequest) ProtoMessage() {}

func (x *CreateArtistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_meloman_meloman_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateArtistRequest.ProtoReflect.Descriptor instead.
func (*CreateArtistRequest) Descriptor() ([]byte, []int) {
	return file_meloman_meloman_proto_rawDescGZIP(), []int{11}
}

func (x *CreateArtistRequest) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *CreateArtistRequest) GetBiography() string {
	if x != nil && x.Biography != nil {
		return *x.Biography
	}
	return ""
}

func (x *CreateArtistRequest) GetImage() string {
	if x != nil && x.Image != nil {
		return *x.Image
	}
	return ""
}

type CreateArtistsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// uuid созданного исполнителя/группы
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateArtistsResponse) Reset() {
	*x = CreateArtistsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meloman_meloman_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateArtistsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateArtistsResponse) ProtoMessage() {}

func (x *CreateArtistsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_meloman_meloman_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateArtistsResponse.ProtoReflect.Descriptor instead.
func (*CreateArtistsResponse) Descriptor() ([]byte, []int) {
	return file_meloman_meloman_proto_rawDescGZIP(), []int{12}
}

func (x *CreateArtistsResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetArtistsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// число в одном ответе, по уполномочию 100
	Limit *uint32 `protobuf:"varint,1,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	// сдвиг в списке
	Offset *uint32 `protobuf:"varint,2,opt,name=offset,proto3,oneof" json:"offset,omitempty"`
}

func (x *GetArtistsRequest) Reset() {
	*x = GetArtistsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meloman_meloman_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetArtistsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetArtistsRequest) ProtoMessage() {}

func (x *GetArtistsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_meloman_meloman_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetArtistsRequest.ProtoReflect.Descriptor instead.
func (*GetArtistsRequest) Descriptor() ([]byte, []int) {
	return file_meloman_meloman_proto_rawDescGZIP(), []int{13}
}

func (x *GetArtistsRequest) GetLimit() uint32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *GetArtistsRequest) GetOffset() uint32 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

type GetArtistsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total   uint32                       `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Artists []*GetArtistsResponse_Artist `protobuf:"bytes,2,rep,name=artists,proto3" json:"artists,omitempty"`
}

func (x *GetArtistsResponse) Reset() {
	*x = GetArtistsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meloman_meloman_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetArtistsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetArtistsResponse) ProtoMessage() {}

func (x *GetArtistsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_meloman_meloman_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetArtistsResponse.ProtoReflect.Descriptor instead.
func (*GetArtistsResponse) Descriptor() ([]byte, []int) {
	return file_meloman_meloman_proto_rawDescGZIP(), []int{14}
}

func (x *GetArtistsResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetArtistsResponse) GetArtists() []*GetArtistsResponse_Artist {
	if x != nil {
		return x.Artists
	}
	return nil
}

type GetArtistByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// uuid исполнителя
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetArtistByIDRequest) Reset() {
	*x = GetArtistByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meloman_meloman_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetArtistByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetArtistByIDRequest) ProtoMessage() {}

func (x *GetArtistByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_meloman_meloman_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetArtistByIDRequest.ProtoReflect.Descriptor instead.
func (*GetArtistByIDRequest) Descriptor() ([]byte, []int) {
	return file_meloman_meloman_proto_rawDescGZIP(), []int{15}
}

func (x *GetArtistByIDRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetArtistByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// uuid исполнителя
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// наименование
	FullName string `protobuf:"bytes,2,opt,name=full_name,json=fullName,proto3" json:"full_name,omitempty"`
	// информация
	Biography string `protobuf:"bytes,3,opt,name=biography,proto3" json:"biography,omitempty"`
	// base64 encoded image
	Image string `protobuf:"bytes,4,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *GetArtistByIDResponse) Reset() {
	*x = GetArtistByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meloman_meloman_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetArtistByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetArtistByIDResponse) ProtoMessage() {}

func (x *GetArtistByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_meloman_meloman_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetArtistByIDResponse.ProtoReflect.Descriptor instead.
func (*GetArtistByIDResponse) Descriptor() ([]byte, []int) {
	return file_meloman_meloman_proto_rawDescGZIP(), []int{16}
}

func (x *GetArtistByIDResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetArtistByIDResponse) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *GetArtistByIDResponse) GetBiography() string {
	if x != nil {
		return x.Biography
	}
	return ""
}

func (x *GetArtistByIDResponse) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

type GetArtistAlbumsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// uuid исполнителя
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetArtistAlbumsRequest) Reset() {
	*x = GetArtistAlbumsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meloman_meloman_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetArtistAlbumsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetArtistAlbumsRequest) ProtoMessage() {}

func (x *GetArtistAlbumsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_meloman_meloman_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetArtistAlbumsRequest.ProtoReflect.Descriptor instead.
func (*GetArtistAlbumsRequest) Descriptor() ([]byte, []int) {
	return file_meloman_meloman_proto_rawDescGZIP(), []int{17}
}

func (x *GetArtistAlbumsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type Format struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id формата
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// наименование
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Format) Reset() {
	*x = Format{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meloman_meloman_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Format) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Format) ProtoMessage() {}

func (x *Format) ProtoReflect() protoreflect.Message {
	mi := &file_meloman_meloman_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Format.ProtoReflect.Descriptor instead.
func (*Format) Descriptor() ([]byte, []int) {
	return file_meloman_meloman_proto_rawDescGZIP(), []int{18}
}

func (x *Format) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Format) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetFormatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Formats []*Format `protobuf:"bytes,1,rep,name=formats,proto3" json:"formats,omitempty"`
}

func (x *GetFormatsResponse) Reset() {
	*x = GetFormatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meloman_meloman_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFormatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFormatsResponse) ProtoMessage() {}

func (x *GetFormatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_meloman_meloman_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFormatsResponse.ProtoReflect.Descriptor instead.
func (*GetFormatsResponse) Descriptor() ([]byte, []int) {
	return file_meloman_meloman_proto_rawDescGZIP(), []int{19}
}

func (x *GetFormatsResponse) GetFormats() []*Format {
	if x != nil {
		return x.Formats
	}
	return nil
}

type Label struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id издателя
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// наименование
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Label) Reset() {
	*x = Label{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meloman_meloman_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Label) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Label) ProtoMessage() {}

func (x *Label) ProtoReflect() protoreflect.Message {
	mi := &file_meloman_meloman_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Label.ProtoReflect.Descriptor instead.
func (*Label) Descriptor() ([]byte, []int) {
	return file_meloman_meloman_proto_rawDescGZIP(), []int{20}
}

func (x *Label) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Label) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetLabelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Labels []*Label `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty"`
}

func (x *GetLabelsResponse) Reset() {
	*x = GetLabelsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meloman_meloman_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLabelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLabelsResponse) ProtoMessage() {}

func (x *GetLabelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_meloman_meloman_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLabelsResponse.ProtoReflect.Descriptor instead.
func (*GetLabelsResponse) Descriptor() ([]byte, []int) {
	return file_meloman_meloman_proto_rawDescGZIP(), []int{21}
}

func (x *GetLabelsResponse) GetLabels() []*Label {
	if x != nil {
		return x.Labels
	}
	return nil
}

type GetArtistAlbumsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// список альбомов отсортированный по году издания
	Albums []*GetArtistAlbumsResponse_Album `protobuf:"bytes,1,rep,name=albums,proto3" json:"albums,omitempty"`
}

func (x *GetArtistAlbumsResponse) Reset() {
	*x = GetArtistAlbumsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meloman_meloman_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetArtistAlbumsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetArtistAlbumsResponse) ProtoMessage() {}

func (x *GetArtistAlbumsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_meloman_meloman_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetArtistAlbumsResponse.ProtoReflect.Descriptor instead.
func (*GetArtistAlbumsResponse) Descriptor() ([]byte, []int) {
	return file_meloman_meloman_proto_rawDescGZIP(), []int{22}
}

func (x *GetArtistAlbumsResponse) GetAlbums() []*GetArtistAlbumsResponse_Album {
	if x != nil {
		return x.Albums
	}
	return nil
}

type CreateAlbumRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// uuid исполнителя
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// данные альбома/сингла
	Album *CreateAlbumRequest_NewAlbum `protobuf:"bytes,2,opt,name=album,proto3" json:"album,omitempty"`
}

func (x *CreateAlbumRequest) Reset() {
	*x = CreateAlbumRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meloman_meloman_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAlbumRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAlbumRequest) ProtoMessage() {}

func (x *CreateAlbumRequest) ProtoReflect() protoreflect.Message {
	mi := &file_meloman_meloman_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAlbumRequest.ProtoReflect.Descriptor instead.
func (*CreateAlbumRequest) Descriptor() ([]byte, []int) {
	return file_meloman_meloman_proto_rawDescGZIP(), []int{23}
}

func (x *CreateAlbumRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateAlbumRequest) GetAlbum() *CreateAlbumRequest_NewAlbum {
	if x != nil {
		return x.Album
	}
	return nil
}

type CreateAlbumResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// uuid созданного альбома
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateAlbumResponse) Reset() {
	*x = CreateAlbumResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meloman_meloman_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAlbumResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAlbumResponse) ProtoMessage() {}

func (x *CreateAlbumResponse) ProtoReflect() protoreflect.Message {
	mi := &file_meloman_meloman_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAlbumResponse.ProtoReflect.Descriptor instead.
func (*CreateAlbumResponse) Descriptor() ([]byte, []int) {
	return file_meloman_meloman_proto_rawDescGZIP(), []int{24}
}

func (x *CreateAlbumResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CreateTrackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// uuid альбома
	Id    string                    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Track *CreateTrackRequest_Track `protobuf:"bytes,2,opt,name=track,proto3" json:"track,omitempty"`
}

func (x *CreateTrackRequest) Reset() {
	*x = CreateTrackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meloman_meloman_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTrackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTrackRequest) ProtoMessage() {}

func (x *CreateTrackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_meloman_meloman_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTrackRequest.ProtoReflect.Descriptor instead.
func (*CreateTrackRequest) Descriptor() ([]byte, []int) {
	return file_meloman_meloman_proto_rawDescGZIP(), []int{25}
}

func (x *CreateTrackRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateTrackRequest) GetTrack() *CreateTrackRequest_Track {
	if x != nil {
		return x.Track
	}
	return nil
}

type CreateTrackResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// uuid созданного трека
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateTrackResponse) Reset() {
	*x = CreateTrackResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meloman_meloman_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTrackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTrackResponse) ProtoMessage() {}

func (x *CreateTrackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_meloman_meloman_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTrackResponse.ProtoReflect.Descriptor instead.
func (*CreateTrackResponse) Descriptor() ([]byte, []int) {
	return file_meloman_meloman_proto_rawDescGZIP(), []int{26}
}

func (x *CreateTrackResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetAlbumTracksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// uuid альбома
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetAlbumTracksRequest) Reset() {
	*x = GetAlbumTracksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meloman_meloman_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAlbumTracksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAlbumTracksRequest) ProtoMessage() {}

func (x *GetAlbumTracksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_meloman_meloman_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAlbumTracksRequest.ProtoReflect.Descriptor instead.
func (*GetAlbumTracksRequest) Descriptor() ([]byte, []int) {
	return file_meloman_meloman_proto_rawDescGZIP(), []int{27}
}

func (x *GetAlbumTracksRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetAlbumTracksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// копозиции альбома отсортированные по номеру в альбоме
	Tracks []*GetAlbumTracksResponse_Track `protobuf:"bytes,1,rep,name=tracks,proto3" json:"tracks,omitempty"`
}

func (x *GetAlbumTracksResponse) Reset() {
	*x = GetAlbumTracksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meloman_meloman_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAlbumTracksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAlbumTracksResponse) ProtoMessage() {}

func (x *GetAlbumTracksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_meloman_meloman_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAlbumTracksResponse.ProtoReflect.Descriptor instead.
func (*GetAlbumTracksResponse) Descriptor() ([]byte, []int) {
	return file_meloman_meloman_proto_rawDescGZIP(), []int{28}
}

func (x *GetAlbumTracksResponse) GetTracks() []*GetAlbumTracksResponse_Track {
	if x != nil {
		return x.Tracks
	}
	return nil
}

type UpdateUserRoleRequest_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Role Role `protobuf:"varint,1,opt,name=role,proto3,enum=github.moguchev.meloman.Role" json:"role,omitempty"`
}

func (x *UpdateUserRoleRequest_Value) Reset() {
	*x = UpdateUserRoleRequest_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meloman_meloman_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserRoleRequest_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserRoleRequest_Value) ProtoMessage() {}

func (x *UpdateUserRoleRequest_Value) ProtoReflect() protoreflect.Message {
	mi := &file_meloman_meloman_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserRoleRequest_Value.ProtoReflect.Descriptor instead.
func (*UpdateUserRoleRequest_Value) Descriptor() ([]byte, []int) {
	return file_meloman_meloman_proto_rawDescGZIP(), []int{10, 0}
}

func (x *UpdateUserRoleRequest_Value) GetRole() Role {
	if x != nil {
		return x.Role
	}
	return Role_USER
}

type GetArtistsResponse_Artist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// uuid исполнителя
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// наименование
	FullName string `protobuf:"bytes,2,opt,name=full_name,json=fullName,proto3" json:"full_name,omitempty"`
	// base64 encoded image
	Image string `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *GetArtistsResponse_Artist) Reset() {
	*x = GetArtistsResponse_Artist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meloman_meloman_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetArtistsResponse_Artist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetArtistsResponse_Artist) ProtoMessage() {}

func (x *GetArtistsResponse_Artist) ProtoReflect() protoreflect.Message {
	mi := &file_meloman_meloman_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetArtistsResponse_Artist.ProtoReflect.Descriptor instead.
func (*GetArtistsResponse_Artist) Descriptor() ([]byte, []int) {
	return file_meloman_meloman_proto_rawDescGZIP(), []int{14, 0}
}

func (x *GetArtistsResponse_Artist) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetArtistsResponse_Artist) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *GetArtistsResponse_Artist) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

type GetArtistAlbumsResponse_Album struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id альбома
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// название
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// год издания
	Year int32 `protobuf:"varint,3,opt,name=year,proto3" json:"year,omitempty"`
	// обложка (base64 encoded image)
	Image string `protobuf:"bytes,4,opt,name=image,proto3" json:"image,omitempty"`
	// формат
	Format *Format `protobuf:"bytes,5,opt,name=format,proto3" json:"format,omitempty"`
	// издатель
	Label *Label `protobuf:"bytes,6,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *GetArtistAlbumsResponse_Album) Reset() {
	*x = GetArtistAlbumsResponse_Album{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meloman_meloman_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetArtistAlbumsResponse_Album) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetArtistAlbumsResponse_Album) ProtoMessage() {}

func (x *GetArtistAlbumsResponse_Album) ProtoReflect() protoreflect.Message {
	mi := &file_meloman_meloman_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetArtistAlbumsResponse_Album.ProtoReflect.Descriptor instead.
func (*GetArtistAlbumsResponse_Album) Descriptor() ([]byte, []int) {
	return file_meloman_meloman_proto_rawDescGZIP(), []int{22, 0}
}

func (x *GetArtistAlbumsResponse_Album) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetArtistAlbumsResponse_Album) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *GetArtistAlbumsResponse_Album) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *GetArtistAlbumsResponse_Album) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *GetArtistAlbumsResponse_Album) GetFormat() *Format {
	if x != nil {
		return x.Format
	}
	return nil
}

func (x *GetArtistAlbumsResponse_Album) GetLabel() *Label {
	if x != nil {
		return x.Label
	}
	return nil
}

type CreateAlbumRequest_NewAlbum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// название
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// год издания
	Year int32 `protobuf:"varint,2,opt,name=year,proto3" json:"year,omitempty"`
	// обложка (base64 encoded image)
	Image *string `protobuf:"bytes,3,opt,name=image,proto3,oneof" json:"image,omitempty"`
	// id формата
	FormatId int32 `protobuf:"varint,4,opt,name=format_id,json=formatId,proto3" json:"format_id,omitempty"`
	// id издателя
	LabelId int32 `protobuf:"varint,5,opt,name=label_id,json=labelId,proto3" json:"label_id,omitempty"`
}

func (x *CreateAlbumRequest_NewAlbum) Reset() {
	*x = CreateAlbumRequest_NewAlbum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meloman_meloman_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAlbumRequest_NewAlbum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAlbumRequest_NewAlbum) ProtoMessage() {}

func (x *CreateAlbumRequest_NewAlbum) ProtoReflect() protoreflect.Message {
	mi := &file_meloman_meloman_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAlbumRequest_NewAlbum.ProtoReflect.Descriptor instead.
func (*CreateAlbumRequest_NewAlbum) Descriptor() ([]byte, []int) {
	return file_meloman_meloman_proto_rawDescGZIP(), []int{23, 0}
}

func (x *CreateAlbumRequest_NewAlbum) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateAlbumRequest_NewAlbum) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *CreateAlbumRequest_NewAlbum) GetImage() string {
	if x != nil && x.Image != nil {
		return *x.Image
	}
	return ""
}

func (x *CreateAlbumRequest_NewAlbum) GetFormatId() int32 {
	if x != nil {
		return x.FormatId
	}
	return 0
}

func (x *CreateAlbumRequest_NewAlbum) GetLabelId() int32 {
	if x != nil {
		return x.LabelId
	}
	return 0
}

type CreateTrackRequest_Track struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// назавние композиции
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// номер композиции в альбоме
	Number int32 `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
	// длительность, формат: ЧЧ:ММ:СС
	Lenght string `protobuf:"bytes,3,opt,name=lenght,proto3" json:"lenght,omitempty"`
}

func (x *CreateTrackRequest_Track) Reset() {
	*x = CreateTrackRequest_Track{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meloman_meloman_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTrackRequest_Track) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTrackRequest_Track) ProtoMessage() {}

func (x *CreateTrackRequest_Track) ProtoReflect() protoreflect.Message {
	mi := &file_meloman_meloman_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTrackRequest_Track.ProtoReflect.Descriptor instead.
func (*CreateTrackRequest_Track) Descriptor() ([]byte, []int) {
	return file_meloman_meloman_proto_rawDescGZIP(), []int{25, 0}
}

func (x *CreateTrackRequest_Track) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateTrackRequest_Track) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *CreateTrackRequest_Track) GetLenght() string {
	if x != nil {
		return x.Lenght
	}
	return ""
}

type GetAlbumTracksResponse_Track struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// uuid композиции
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// назавние композиции
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// номер композиции в альбоме
	Number int32 `protobuf:"varint,3,opt,name=number,proto3" json:"number,omitempty"`
	// длительность, формат: ЧЧ:ММ:СС
	Lenght string `protobuf:"bytes,4,opt,name=lenght,proto3" json:"lenght,omitempty"`
}

func (x *GetAlbumTracksResponse_Track) Reset() {
	*x = GetAlbumTracksResponse_Track{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meloman_meloman_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAlbumTracksResponse_Track) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAlbumTracksResponse_Track) ProtoMessage() {}

func (x *GetAlbumTracksResponse_Track) ProtoReflect() protoreflect.Message {
	mi := &file_meloman_meloman_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAlbumTracksResponse_Track.ProtoReflect.Descriptor instead.
func (*GetAlbumTracksResponse_Track) Descriptor() ([]byte, []int) {
	return file_meloman_meloman_proto_rawDescGZIP(), []int{28, 0}
}

func (x *GetAlbumTracksResponse_Track) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetAlbumTracksResponse_Track) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *GetAlbumTracksResponse_Track) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *GetAlbumTracksResponse_Track) GetLenght() string {
	if x != nil {
		return x.Lenght
	}
	return ""
}

var File_meloman_meloman_proto protoreflect.FileDescriptor

var file_meloman_meloman_proto_rawDesc = []byte{
	0x0a, 0x15, 0x6d, 0x65, 0x6c, 0x6f, 0x6d, 0x61, 0x6e, 0x2f, 0x6d, 0x65, 0x6c, 0x6f, 0x6d, 0x61,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x6d, 0x6f, 0x67, 0x75, 0x63, 0x68, 0x65, 0x76, 0x2e, 0x6d, 0x65, 0x6c, 0x6f, 0x6d, 0x61, 0x6e,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x62, 0x6f, 0x64, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x4b, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x1a,
	0x0a, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2,
	0x41, 0x01, 0x02, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41,
	0x01, 0x02, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x61, 0x0a, 0x11,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x4c, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x6d, 0x6f, 0x67, 0x75, 0x63, 0x68, 0x65, 0x76, 0x2e, 0x6d, 0x65, 0x6c, 0x6f, 0x6d, 0x61, 0x6e,
	0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x42, 0x04, 0xe2, 0x41,
	0x01, 0x02, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x22,
	0x24, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x5b, 0x0a, 0x0b, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x6d, 0x6f, 0x67, 0x75, 0x63, 0x68, 0x65, 0x76, 0x2e, 0x6d, 0x65, 0x6c, 0x6f,
	0x6d, 0x61, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x42,
	0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x22, 0x1e, 0x0a, 0x0c, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x2a, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x49,
	0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x02, 0x69, 0x64, 0x22, 0xd5,
	0x01, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x39, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x31, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x6f, 0x67, 0x75, 0x63,
	0x68, 0x65, 0x76, 0x2e, 0x6d, 0x65, 0x6c, 0x6f, 0x6d, 0x61, 0x6e, 0x2e, 0x52, 0x6f, 0x6c, 0x65,
	0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x48, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x6f, 0x67, 0x75, 0x63, 0x68, 0x65, 0x76, 0x2e, 0x6d, 0x65,
	0x6c, 0x6f, 0x6d, 0x61, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x22, 0x6a, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x01, 0x48, 0x00, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x01, 0x48, 0x01, 0x52, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x5d, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x33, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d,
	0x6f, 0x67, 0x75, 0x63, 0x68, 0x65, 0x76, 0x2e, 0x6d, 0x65, 0x6c, 0x6f, 0x6d, 0x61, 0x6e, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x22, 0xb9, 0x01, 0x0a, 0x15,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x02, 0x69, 0x64, 0x12, 0x48, 0x0a, 0x04, 0x72,
	0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x6d, 0x6f, 0x67, 0x75, 0x63, 0x68, 0x65, 0x76, 0x2e, 0x6d, 0x65, 0x6c, 0x6f,
	0x6d, 0x61, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x04, 0x72, 0x6f, 0x6c, 0x65, 0x1a, 0x40, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x37,
	0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x6f, 0x67, 0x75, 0x63, 0x68, 0x65, 0x76, 0x2e, 0x6d,
	0x65, 0x6c, 0x6f, 0x6d, 0x61, 0x6e, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x42, 0x04, 0xe2, 0x41, 0x01,
	0x02, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0x9a, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x21, 0x0a, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x27, 0x0a, 0x09, 0x62, 0x69, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x01, 0x48, 0x00, 0x52, 0x09, 0x62,
	0x69, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x05, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x01,
	0x48, 0x01, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x62, 0x69, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x22, 0x27, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x72,
	0x74, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x6c, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x01, 0x48, 0x00, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x01, 0x48, 0x01, 0x52, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0xc5, 0x01, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x4c, 0x0a, 0x07, 0x61, 0x72, 0x74, 0x69,
	0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x6d, 0x6f, 0x67, 0x75, 0x63, 0x68, 0x65, 0x76, 0x2e, 0x6d, 0x65, 0x6c, 0x6f,
	0x6d, 0x61, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x52, 0x07, 0x61,
	0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x1a, 0x4b, 0x0a, 0x06, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x22, 0x2c, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74,
	0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x78, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x42, 0x79,
	0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x75,
	0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x69, 0x6f, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x69, 0x6f, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x2e, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2c, 0x0a, 0x06, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x4f, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x39, 0x0a, 0x07, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x6f, 0x67, 0x75, 0x63, 0x68,
	0x65, 0x76, 0x2e, 0x6d, 0x65, 0x6c, 0x6f, 0x6d, 0x61, 0x6e, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x52, 0x07, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x22, 0x2b, 0x0a, 0x05, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x4b, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x6f, 0x67, 0x75, 0x63, 0x68, 0x65, 0x76, 0x2e, 0x6d,
	0x65, 0x6c, 0x6f, 0x6d, 0x61, 0x6e, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x22, 0xb2, 0x02, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69,
	0x73, 0x74, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4e, 0x0a, 0x06, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x6f, 0x67, 0x75, 0x63, 0x68,
	0x65, 0x76, 0x2e, 0x6d, 0x65, 0x6c, 0x6f, 0x6d, 0x61, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x72,
	0x74, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x52, 0x06, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x73,
	0x1a, 0xc6, 0x01, 0x0a, 0x05, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x79, 0x65, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x6d, 0x6f, 0x67, 0x75, 0x63, 0x68, 0x65, 0x76, 0x2e, 0x6d, 0x65, 0x6c,
	0x6f, 0x6d, 0x61, 0x6e, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x34, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x6f, 0x67, 0x75,
	0x63, 0x68, 0x65, 0x76, 0x2e, 0x6d, 0x65, 0x6c, 0x6f, 0x6d, 0x61, 0x6e, 0x2e, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0xae, 0x02, 0x0a, 0x12, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41,
	0x01, 0x02, 0x52, 0x02, 0x69, 0x64, 0x12, 0x50, 0x0a, 0x05, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d,
	0x6f, 0x67, 0x75, 0x63, 0x68, 0x65, 0x76, 0x2e, 0x6d, 0x65, 0x6c, 0x6f, 0x6d, 0x61, 0x6e, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x4e, 0x65, 0x77, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x42, 0x04, 0xe2, 0x41, 0x01,
	0x02, 0x52, 0x05, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x1a, 0xaf, 0x01, 0x0a, 0x08, 0x4e, 0x65, 0x77,
	0x41, 0x6c, 0x62, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x18, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x1f, 0x0a, 0x05, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x01,
	0x48, 0x00, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x08, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x08, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x07, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x64,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x25, 0x0a, 0x13, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0xd4, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x02, 0x69, 0x64, 0x12, 0x47,
	0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x6f, 0x67, 0x75, 0x63, 0x68, 0x65, 0x76, 0x2e,
	0x6d, 0x65, 0x6c, 0x6f, 0x6d, 0x61, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x52, 0x05, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x1a, 0x5f, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x12, 0x1a, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x06,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x04, 0xe2, 0x41,
	0x01, 0x02, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x06, 0x6c, 0x65,
	0x6e, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02,
	0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x68, 0x74, 0x22, 0x25, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x2d, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x02, 0x69, 0x64, 0x22, 0xc6,
	0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x06, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x6d, 0x6f, 0x67, 0x75, 0x63, 0x68, 0x65, 0x76, 0x2e, 0x6d, 0x65, 0x6c, 0x6f,
	0x6d, 0x61, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x52, 0x06, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x1a, 0x5d, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6c, 0x65, 0x6e, 0x67, 0x68, 0x74, 0x2a, 0x1b, 0x0a, 0x04, 0x52, 0x6f, 0x6c, 0x65, 0x12,
	0x08, 0x0a, 0x04, 0x55, 0x53, 0x45, 0x52, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x44, 0x4d,
	0x49, 0x4e, 0x10, 0x01, 0x32, 0xb5, 0x12, 0x0a, 0x07, 0x4d, 0x65, 0x6c, 0x6f, 0x6d, 0x61, 0x6e,
	0x12, 0x45, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x0d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x07,
	0x12, 0x05, 0x2f, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x76, 0x0a, 0x04, 0x41, 0x75, 0x74, 0x68, 0x12,
	0x24, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x6f, 0x67, 0x75, 0x63, 0x68, 0x65,
	0x76, 0x2e, 0x6d, 0x65, 0x6c, 0x6f, 0x6d, 0x61, 0x6e, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d,
	0x6f, 0x67, 0x75, 0x63, 0x68, 0x65, 0x76, 0x2e, 0x6d, 0x65, 0x6c, 0x6f, 0x6d, 0x61, 0x6e, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1b, 0x22, 0x0c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75,
	0x74, 0x68, 0x3a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12,
	0x89, 0x01, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2a,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x6f, 0x67, 0x75, 0x63, 0x68, 0x65, 0x76,
	0x2e, 0x6d, 0x65, 0x6c, 0x6f, 0x6d, 0x61, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x6d, 0x6f, 0x67, 0x75, 0x63, 0x68, 0x65, 0x76, 0x2e, 0x6d, 0x65, 0x6c,
	0x6f, 0x6d, 0x61, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22,
	0x0d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x3a, 0x0b,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x99, 0x01, 0x0a, 0x0b,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x49, 0x44, 0x12, 0x2b, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x6f, 0x67, 0x75, 0x63, 0x68, 0x65, 0x76, 0x2e, 0x6d, 0x65,
	0x6c, 0x6f, 0x6d, 0x61, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x49,
	0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x6d, 0x6f, 0x67, 0x75, 0x63, 0x68, 0x65, 0x76, 0x2e, 0x6d, 0x65, 0x6c, 0x6f, 0x6d,
	0x61, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x92, 0x41, 0x12, 0x62, 0x10, 0x0a, 0x0e, 0x0a,
	0x0a, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x41, 0x75, 0x74, 0x68, 0x12, 0x00, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x8b, 0x01, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x12, 0x28, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x6f,
	0x67, 0x75, 0x63, 0x68, 0x65, 0x76, 0x2e, 0x6d, 0x65, 0x6c, 0x6f, 0x6d, 0x61, 0x6e, 0x2e, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x6f, 0x67, 0x75, 0x63, 0x68, 0x65, 0x76,
	0x2e, 0x6d, 0x65, 0x6c, 0x6f, 0x6d, 0x61, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x92, 0x41, 0x12, 0x62, 0x10,
	0x0a, 0x0e, 0x0a, 0x0a, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x41, 0x75, 0x74, 0x68, 0x12, 0x00,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x12, 0x0d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x94, 0x01, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x2e, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x6d, 0x6f, 0x67, 0x75, 0x63, 0x68, 0x65, 0x76, 0x2e, 0x6d, 0x65, 0x6c, 0x6f, 0x6d,
	0x61, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x3a, 0x92, 0x41, 0x12, 0x62, 0x10, 0x0a, 0x0e, 0x0a, 0x0a, 0x41, 0x70, 0x69, 0x4b, 0x65,
	0x79, 0x41, 0x75, 0x74, 0x68, 0x12, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x1a, 0x17, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x3a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x9d, 0x01, 0x0a,
	0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x6f, 0x67, 0x75, 0x63, 0x68, 0x65, 0x76, 0x2e,
	0x6d, 0x65, 0x6c, 0x6f, 0x6d, 0x61, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x72,
	0x74, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x6f, 0x67, 0x75, 0x63, 0x68, 0x65, 0x76, 0x2e, 0x6d, 0x65,
	0x6c, 0x6f, 0x6d, 0x61, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69,
	0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x92, 0x41, 0x12,
	0x62, 0x10, 0x0a, 0x0e, 0x0a, 0x0a, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x41, 0x75, 0x74, 0x68,
	0x12, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x22, 0x0f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x93, 0x01, 0x0a,
	0x0a, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x12, 0x2a, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x6f, 0x67, 0x75, 0x63, 0x68, 0x65, 0x76, 0x2e, 0x6d, 0x65,
	0x6c, 0x6f, 0x6d, 0x61, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x6d, 0x6f, 0x67, 0x75, 0x63, 0x68, 0x65, 0x76, 0x2e, 0x6d, 0x65, 0x6c, 0x6f, 0x6d, 0x61,
	0x6e, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x92, 0x41, 0x12, 0x62, 0x10, 0x0a, 0x0e, 0x0a, 0x0a, 0x41,
	0x70, 0x69, 0x4b, 0x65, 0x79, 0x41, 0x75, 0x74, 0x68, 0x12, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x11, 0x12, 0x0f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x73,
	0x74, 0x73, 0x12, 0xa1, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74,
	0x42, 0x79, 0x49, 0x44, 0x12, 0x2d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x6f,
	0x67, 0x75, 0x63, 0x68, 0x65, 0x76, 0x2e, 0x6d, 0x65, 0x6c, 0x6f, 0x6d, 0x61, 0x6e, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x6f, 0x67,
	0x75, 0x63, 0x68, 0x65, 0x76, 0x2e, 0x6d, 0x65, 0x6c, 0x6f, 0x6d, 0x61, 0x6e, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x31, 0x92, 0x41, 0x12, 0x62, 0x10, 0x0a, 0x0e, 0x0a, 0x0a, 0x41, 0x70,
	0x69, 0x4b, 0x65, 0x79, 0x41, 0x75, 0x74, 0x68, 0x12, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16,
	0x12, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74,
	0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xae, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x41, 0x72,
	0x74, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x73, 0x12, 0x2f, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x6d, 0x6f, 0x67, 0x75, 0x63, 0x68, 0x65, 0x76, 0x2e, 0x6d, 0x65, 0x6c,
	0x6f, 0x6d, 0x61, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x41, 0x6c,
	0x62, 0x75, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x6f, 0x67, 0x75, 0x63, 0x68, 0x65, 0x76, 0x2e, 0x6d, 0x65,
	0x6c, 0x6f, 0x6d, 0x61, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x41,
	0x6c, 0x62, 0x75, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x38, 0x92,
	0x41, 0x12, 0x62, 0x10, 0x0a, 0x0e, 0x0a, 0x0a, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x41, 0x75,
	0x74, 0x68, 0x12, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x2f, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x73, 0x12, 0x7f, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x2b, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x6f, 0x67, 0x75, 0x63, 0x68, 0x65, 0x76, 0x2e,
	0x6d, 0x65, 0x6c, 0x6f, 0x6d, 0x61, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x92, 0x41, 0x12, 0x62,
	0x10, 0x0a, 0x0e, 0x0a, 0x0a, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x41, 0x75, 0x74, 0x68, 0x12,
	0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x12, 0x7c, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x2a, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x6f, 0x67, 0x75, 0x63, 0x68, 0x65, 0x76, 0x2e,
	0x6d, 0x65, 0x6c, 0x6f, 0x6d, 0x61, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x92, 0x41, 0x12, 0x62, 0x10,
	0x0a, 0x0e, 0x0a, 0x0a, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x41, 0x75, 0x74, 0x68, 0x12, 0x00,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12, 0x0e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0xa9, 0x01, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x12, 0x2b, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x6d, 0x6f, 0x67, 0x75, 0x63, 0x68, 0x65, 0x76, 0x2e, 0x6d, 0x65, 0x6c, 0x6f, 0x6d, 0x61, 0x6e,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x6f, 0x67,
	0x75, 0x63, 0x68, 0x65, 0x76, 0x2e, 0x6d, 0x65, 0x6c, 0x6f, 0x6d, 0x61, 0x6e, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x3f, 0x92, 0x41, 0x12, 0x62, 0x10, 0x0a, 0x0e, 0x0a, 0x0a, 0x41, 0x70, 0x69, 0x4b,
	0x65, 0x79, 0x41, 0x75, 0x74, 0x68, 0x12, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x22, 0x1b,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x2f,
	0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x73, 0x3a, 0x05, 0x61, 0x6c, 0x62,
	0x75, 0x6d, 0x12, 0xa8, 0x01, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x12, 0x2b, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x6f, 0x67, 0x75,
	0x63, 0x68, 0x65, 0x76, 0x2e, 0x6d, 0x65, 0x6c, 0x6f, 0x6d, 0x61, 0x6e, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2c, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x6f, 0x67, 0x75, 0x63, 0x68, 0x65,
	0x76, 0x2e, 0x6d, 0x65, 0x6c, 0x6f, 0x6d, 0x61, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3e, 0x92,
	0x41, 0x12, 0x62, 0x10, 0x0a, 0x0e, 0x0a, 0x0a, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x41, 0x75,
	0x74, 0x68, 0x12, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x22, 0x1a, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x3a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x12, 0xaa, 0x01,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73,
	0x12, 0x2e, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x6f, 0x67, 0x75, 0x63, 0x68,
	0x65, 0x76, 0x2e, 0x6d, 0x65, 0x6c, 0x6f, 0x6d, 0x61, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x62, 0x75, 0x6d, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2f, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x6f, 0x67, 0x75, 0x63, 0x68,
	0x65, 0x76, 0x2e, 0x6d, 0x65, 0x6c, 0x6f, 0x6d, 0x61, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x62, 0x75, 0x6d, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x37, 0x92, 0x41, 0x12, 0x62, 0x10, 0x0a, 0x0e, 0x0a, 0x0a, 0x41, 0x70, 0x69, 0x4b,
	0x65, 0x79, 0x41, 0x75, 0x74, 0x68, 0x12, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x73, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x1a, 0x8f, 0x01, 0x92, 0x41, 0x8b,
	0x01, 0x12, 0x36, 0xd0, 0xa1, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb2, 0xd0, 0xb8, 0xd1, 0x81, 0x2d,
	0xd0, 0xb8, 0xd0, 0xbd, 0xd1, 0x82, 0xd0, 0xb5, 0xd1, 0x80, 0xd1, 0x84, 0xd0, 0xb5, 0xd0, 0xb9,
	0xd1, 0x81, 0x20, 0xd0, 0xba, 0x20, 0xd0, 0x91, 0xd0, 0x94, 0x20, 0xd0, 0xbc, 0xd0, 0xb5, 0xd0,
	0xbb, 0xd0, 0xbe, 0xd0, 0xbc, 0xd0, 0xb0, 0xd0, 0xbd, 0x1a, 0x51, 0x0a, 0x1f, 0x46, 0x69, 0x6e,
	0x64, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74,
	0x20, 0x45, 0x63, 0x68, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2e, 0x68, 0x74,
	0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f,
	0x67, 0x72, 0x70, 0x63, 0x2d, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x42, 0x9b, 0x05, 0x5a,
	0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x6f, 0x67, 0x75,
	0x63, 0x68, 0x65, 0x76, 0x2f, 0x6d, 0x65, 0x6c, 0x6f, 0x6d, 0x61, 0x6e, 0x2f, 0x70, 0x6b, 0x67,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x65, 0x6c, 0x6f, 0x6d, 0x61, 0x6e, 0x92, 0x41, 0xea, 0x04,
	0x12, 0xec, 0x02, 0x0a, 0x6d, 0xd0, 0x9a, 0xd1, 0x83, 0xd1, 0x80, 0xd1, 0x81, 0xd0, 0xbe, 0xd0,
	0xb2, 0xd0, 0xb0, 0xd1, 0x8f, 0x20, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb1, 0xd0, 0xbe, 0xd1, 0x82,
	0xd0, 0xb0, 0x20, 0xd0, 0xbf, 0xd0, 0xbe, 0x20, 0xd0, 0xba, 0xd1, 0x83, 0xd1, 0x80, 0xd1, 0x81,
	0xd1, 0x83, 0x20, 0xd0, 0x91, 0xd0, 0xa1, 0xd0, 0x91, 0xd0, 0x94, 0x20, 0xd0, 0x98, 0xd0, 0xa3,
	0x38, 0x2d, 0x38, 0x31, 0x20, 0xd0, 0x9c, 0xd0, 0x93, 0xd0, 0xa2, 0xd0, 0xa3, 0x20, 0xd0, 0xb8,
	0xd0, 0xbc, 0x2e, 0x20, 0xd0, 0x9d, 0x2e, 0x20, 0xd0, 0xad, 0x2e, 0x20, 0xd0, 0x91, 0xd0, 0xb0,
	0xd1, 0x83, 0xd0, 0xbc, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb0, 0x20, 0x32, 0x30, 0x32, 0x31, 0xd0,
	0xb3, 0x2e, 0x12, 0x5c, 0xd0, 0xa1, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb2, 0xd0, 0xb8, 0xd1, 0x81,
	0x20, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xb5, 0xd0, 0xb4, 0xd0, 0xbe, 0xd1, 0x81, 0xd1, 0x82, 0xd0,
	0xb0, 0xd0, 0xb2, 0xd0, 0xbb, 0xd1, 0x8f, 0xd0, 0xb5, 0xd1, 0x82, 0x20, 0x52, 0x45, 0x53, 0x54,
	0x20, 0x41, 0x50, 0x49, 0x20, 0xd0, 0xb4, 0xd0, 0xbb, 0xd1, 0x8f, 0x20, 0xd1, 0x80, 0xd0, 0xb0,
	0xd0, 0xb1, 0xd0, 0xbe, 0xd1, 0x82, 0xd1, 0x8b, 0x20, 0xd1, 0x81, 0x20, 0xd0, 0x91, 0xd0, 0x94,
	0x20, 0xd0, 0xbc, 0xd0, 0xb5, 0xd0, 0xbb, 0xd0, 0xbe, 0xd0, 0xbc, 0xd0, 0xb0, 0xd0, 0xbd, 0x2e,
	0x22, 0x46, 0x0a, 0x0f, 0x4c, 0x65, 0x6f, 0x6e, 0x69, 0x64, 0x20, 0x4d, 0x6f, 0x67, 0x75, 0x63,
	0x68, 0x65, 0x76, 0x12, 0x1b, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x6f, 0x67, 0x75, 0x63, 0x68, 0x65, 0x76,
	0x1a, 0x16, 0x61, 0x62, 0x72, 0x61, 0x63, 0x61, 0x64, 0x61, 0x62, 0x72, 0x61, 0x2e, 0x31, 0x34,
	0x40, 0x6d, 0x61, 0x69, 0x6c, 0x2e, 0x72, 0x75, 0x2a, 0x4e, 0x0a, 0x0b, 0x4d, 0x49, 0x54, 0x20,
	0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f,
	0x2f, 0x72, 0x61, 0x77, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x75, 0x73, 0x65, 0x72, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x6f, 0x67, 0x75, 0x63,
	0x68, 0x65, 0x76, 0x2f, 0x6d, 0x65, 0x6c, 0x6f, 0x6d, 0x61, 0x6e, 0x2f, 0x6d, 0x61, 0x69, 0x6e,
	0x2f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x32, 0x05, 0x31, 0x2e, 0x30, 0x2e, 0x30, 0x1a,
	0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x68, 0x6f, 0x73, 0x74, 0x3a, 0x38, 0x30, 0x2a, 0x02, 0x01,
	0x02, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a,
	0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x5a, 0x95, 0x01, 0x0a, 0x92, 0x01, 0x0a, 0x0a, 0x41, 0x70, 0x69,
	0x4b, 0x65, 0x79, 0x41, 0x75, 0x74, 0x68, 0x12, 0x83, 0x01, 0x08, 0x02, 0x1a, 0x1b, 0x67, 0x72,
	0x70, 0x63, 0x2d, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x02, 0x4a, 0x60, 0x0a, 0x1e, 0x78,
	0x2d, 0x61, 0x6d, 0x61, 0x7a, 0x6f, 0x6e, 0x2d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72, 0x12, 0x3e, 0x2a,
	0x3c, 0x0a, 0x29, 0x0a, 0x1c, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x74, 0x6c, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x12, 0x09, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x9c, 0x40, 0x0a, 0x0f, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x07, 0x1a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x72, 0x2b, 0x0a,
	0x04, 0xd0, 0xa2, 0xd0, 0x97, 0x12, 0x23, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x6f, 0x67, 0x75, 0x63, 0x68,
	0x65, 0x76, 0x2f, 0x6d, 0x65, 0x6c, 0x6f, 0x6d, 0x61, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_meloman_meloman_proto_rawDescOnce sync.Once
	file_meloman_meloman_proto_rawDescData = file_meloman_meloman_proto_rawDesc
)

func file_meloman_meloman_proto_rawDescGZIP() []byte {
	file_meloman_meloman_proto_rawDescOnce.Do(func() {
		file_meloman_meloman_proto_rawDescData = protoimpl.X.CompressGZIP(file_meloman_meloman_proto_rawDescData)
	})
	return file_meloman_meloman_proto_rawDescData
}

var file_meloman_meloman_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_meloman_meloman_proto_msgTypes = make([]protoimpl.MessageInfo, 35)
var file_meloman_meloman_proto_goTypes = []interface{}{
	(Role)(0),                             // 0: github.moguchev.meloman.Role
	(*Credentials)(nil),                   // 1: github.moguchev.meloman.Credentials
	(*CreateUserRequest)(nil),             // 2: github.moguchev.meloman.CreateUserRequest
	(*CreateUserResponse)(nil),            // 3: github.moguchev.meloman.CreateUserResponse
	(*AuthRequest)(nil),                   // 4: github.moguchev.meloman.AuthRequest
	(*AuthResponse)(nil),                  // 5: github.moguchev.meloman.AuthResponse
	(*GetUserByIDRequest)(nil),            // 6: github.moguchev.meloman.GetUserByIDRequest
	(*User)(nil),                          // 7: github.moguchev.meloman.User
	(*GetUserByIDResponse)(nil),           // 8: github.moguchev.meloman.GetUserByIDResponse
	(*GetUsersRequest)(nil),               // 9: github.moguchev.meloman.GetUsersRequest
	(*GetUsersResponse)(nil),              // 10: github.moguchev.meloman.GetUsersResponse
	(*UpdateUserRoleRequest)(nil),         // 11: github.moguchev.meloman.UpdateUserRoleRequest
	(*CreateArtistRequest)(nil),           // 12: github.moguchev.meloman.CreateArtistRequest
	(*CreateArtistsResponse)(nil),         // 13: github.moguchev.meloman.CreateArtistsResponse
	(*GetArtistsRequest)(nil),             // 14: github.moguchev.meloman.GetArtistsRequest
	(*GetArtistsResponse)(nil),            // 15: github.moguchev.meloman.GetArtistsResponse
	(*GetArtistByIDRequest)(nil),          // 16: github.moguchev.meloman.GetArtistByIDRequest
	(*GetArtistByIDResponse)(nil),         // 17: github.moguchev.meloman.GetArtistByIDResponse
	(*GetArtistAlbumsRequest)(nil),        // 18: github.moguchev.meloman.GetArtistAlbumsRequest
	(*Format)(nil),                        // 19: github.moguchev.meloman.Format
	(*GetFormatsResponse)(nil),            // 20: github.moguchev.meloman.GetFormatsResponse
	(*Label)(nil),                         // 21: github.moguchev.meloman.Label
	(*GetLabelsResponse)(nil),             // 22: github.moguchev.meloman.GetLabelsResponse
	(*GetArtistAlbumsResponse)(nil),       // 23: github.moguchev.meloman.GetArtistAlbumsResponse
	(*CreateAlbumRequest)(nil),            // 24: github.moguchev.meloman.CreateAlbumRequest
	(*CreateAlbumResponse)(nil),           // 25: github.moguchev.meloman.CreateAlbumResponse
	(*CreateTrackRequest)(nil),            // 26: github.moguchev.meloman.CreateTrackRequest
	(*CreateTrackResponse)(nil),           // 27: github.moguchev.meloman.CreateTrackResponse
	(*GetAlbumTracksRequest)(nil),         // 28: github.moguchev.meloman.GetAlbumTracksRequest
	(*GetAlbumTracksResponse)(nil),        // 29: github.moguchev.meloman.GetAlbumTracksResponse
	(*UpdateUserRoleRequest_Value)(nil),   // 30: github.moguchev.meloman.UpdateUserRoleRequest.Value
	(*GetArtistsResponse_Artist)(nil),     // 31: github.moguchev.meloman.GetArtistsResponse.Artist
	(*GetArtistAlbumsResponse_Album)(nil), // 32: github.moguchev.meloman.GetArtistAlbumsResponse.Album
	(*CreateAlbumRequest_NewAlbum)(nil),   // 33: github.moguchev.meloman.CreateAlbumRequest.NewAlbum
	(*CreateTrackRequest_Track)(nil),      // 34: github.moguchev.meloman.CreateTrackRequest.Track
	(*GetAlbumTracksResponse_Track)(nil),  // 35: github.moguchev.meloman.GetAlbumTracksResponse.Track
	(*timestamppb.Timestamp)(nil),         // 36: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),                 // 37: google.protobuf.Empty
}
var file_meloman_meloman_proto_depIdxs = []int32{
	1,  // 0: github.moguchev.meloman.CreateUserRequest.credentials:type_name -> github.moguchev.meloman.Credentials
	1,  // 1: github.moguchev.meloman.AuthRequest.credentials:type_name -> github.moguchev.meloman.Credentials
	36, // 2: github.moguchev.meloman.User.created_at:type_name -> google.protobuf.Timestamp
	36, // 3: github.moguchev.meloman.User.updated_at:type_name -> google.protobuf.Timestamp
	0,  // 4: github.moguchev.meloman.User.role:type_name -> github.moguchev.meloman.Role
	7,  // 5: github.moguchev.meloman.GetUserByIDResponse.user:type_name -> github.moguchev.meloman.User
	7,  // 6: github.moguchev.meloman.GetUsersResponse.users:type_name -> github.moguchev.meloman.User
	30, // 7: github.moguchev.meloman.UpdateUserRoleRequest.role:type_name -> github.moguchev.meloman.UpdateUserRoleRequest.Value
	31, // 8: github.moguchev.meloman.GetArtistsResponse.artists:type_name -> github.moguchev.meloman.GetArtistsResponse.Artist
	19, // 9: github.moguchev.meloman.GetFormatsResponse.formats:type_name -> github.moguchev.meloman.Format
	21, // 10: github.moguchev.meloman.GetLabelsResponse.labels:type_name -> github.moguchev.meloman.Label
	32, // 11: github.moguchev.meloman.GetArtistAlbumsResponse.albums:type_name -> github.moguchev.meloman.GetArtistAlbumsResponse.Album
	33, // 12: github.moguchev.meloman.CreateAlbumRequest.album:type_name -> github.moguchev.meloman.CreateAlbumRequest.NewAlbum
	34, // 13: github.moguchev.meloman.CreateTrackRequest.track:type_name -> github.moguchev.meloman.CreateTrackRequest.Track
	35, // 14: github.moguchev.meloman.GetAlbumTracksResponse.tracks:type_name -> github.moguchev.meloman.GetAlbumTracksResponse.Track
	0,  // 15: github.moguchev.meloman.UpdateUserRoleRequest.Value.role:type_name -> github.moguchev.meloman.Role
	19, // 16: github.moguchev.meloman.GetArtistAlbumsResponse.Album.format:type_name -> github.moguchev.meloman.Format
	21, // 17: github.moguchev.meloman.GetArtistAlbumsResponse.Album.label:type_name -> github.moguchev.meloman.Label
	37, // 18: github.moguchev.meloman.Meloman.Ping:input_type -> google.protobuf.Empty
	4,  // 19: github.moguchev.meloman.Meloman.Auth:input_type -> github.moguchev.meloman.AuthRequest
	2,  // 20: github.moguchev.meloman.Meloman.CreateUser:input_type -> github.moguchev.meloman.CreateUserRequest
	6,  // 21: github.moguchev.meloman.Meloman.GetUserByID:input_type -> github.moguchev.meloman.GetUserByIDRequest
	9,  // 22: github.moguchev.meloman.Meloman.GetUsers:input_type -> github.moguchev.meloman.GetUsersRequest
	11, // 23: github.moguchev.meloman.Meloman.UpdateUserRole:input_type -> github.moguchev.meloman.UpdateUserRoleRequest
	12, // 24: github.moguchev.meloman.Meloman.CreateArtist:input_type -> github.moguchev.meloman.CreateArtistRequest
	14, // 25: github.moguchev.meloman.Meloman.GetArtists:input_type -> github.moguchev.meloman.GetArtistsRequest
	16, // 26: github.moguchev.meloman.Meloman.GetArtistByID:input_type -> github.moguchev.meloman.GetArtistByIDRequest
	18, // 27: github.moguchev.meloman.Meloman.GetArtistAlbums:input_type -> github.moguchev.meloman.GetArtistAlbumsRequest
	37, // 28: github.moguchev.meloman.Meloman.GetFormats:input_type -> google.protobuf.Empty
	37, // 29: github.moguchev.meloman.Meloman.GetLabels:input_type -> google.protobuf.Empty
	24, // 30: github.moguchev.meloman.Meloman.CreateAlbum:input_type -> github.moguchev.meloman.CreateAlbumRequest
	26, // 31: github.moguchev.meloman.Meloman.CreateTrack:input_type -> github.moguchev.meloman.CreateTrackRequest
	28, // 32: github.moguchev.meloman.Meloman.GetAlbumTracks:input_type -> github.moguchev.meloman.GetAlbumTracksRequest
	37, // 33: github.moguchev.meloman.Meloman.Ping:output_type -> google.protobuf.Empty
	5,  // 34: github.moguchev.meloman.Meloman.Auth:output_type -> github.moguchev.meloman.AuthResponse
	3,  // 35: github.moguchev.meloman.Meloman.CreateUser:output_type -> github.moguchev.meloman.CreateUserResponse
	8,  // 36: github.moguchev.meloman.Meloman.GetUserByID:output_type -> github.moguchev.meloman.GetUserByIDResponse
	10, // 37: github.moguchev.meloman.Meloman.GetUsers:output_type -> github.moguchev.meloman.GetUsersResponse
	37, // 38: github.moguchev.meloman.Meloman.UpdateUserRole:output_type -> google.protobuf.Empty
	13, // 39: github.moguchev.meloman.Meloman.CreateArtist:output_type -> github.moguchev.meloman.CreateArtistsResponse
	15, // 40: github.moguchev.meloman.Meloman.GetArtists:output_type -> github.moguchev.meloman.GetArtistsResponse
	17, // 41: github.moguchev.meloman.Meloman.GetArtistByID:output_type -> github.moguchev.meloman.GetArtistByIDResponse
	23, // 42: github.moguchev.meloman.Meloman.GetArtistAlbums:output_type -> github.moguchev.meloman.GetArtistAlbumsResponse
	20, // 43: github.moguchev.meloman.Meloman.GetFormats:output_type -> github.moguchev.meloman.GetFormatsResponse
	22, // 44: github.moguchev.meloman.Meloman.GetLabels:output_type -> github.moguchev.meloman.GetLabelsResponse
	25, // 45: github.moguchev.meloman.Meloman.CreateAlbum:output_type -> github.moguchev.meloman.CreateAlbumResponse
	27, // 46: github.moguchev.meloman.Meloman.CreateTrack:output_type -> github.moguchev.meloman.CreateTrackResponse
	29, // 47: github.moguchev.meloman.Meloman.GetAlbumTracks:output_type -> github.moguchev.meloman.GetAlbumTracksResponse
	33, // [33:48] is the sub-list for method output_type
	18, // [18:33] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_meloman_meloman_proto_init() }
func file_meloman_meloman_proto_init() {
	if File_meloman_meloman_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_meloman_meloman_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Credentials); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meloman_meloman_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meloman_meloman_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meloman_meloman_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meloman_meloman_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meloman_meloman_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meloman_meloman_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meloman_meloman_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meloman_meloman_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUsersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meloman_meloman_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUsersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meloman_meloman_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserRoleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meloman_meloman_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateArtistRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meloman_meloman_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateArtistsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meloman_meloman_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetArtistsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meloman_meloman_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetArtistsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meloman_meloman_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetArtistByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meloman_meloman_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetArtistByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meloman_meloman_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetArtistAlbumsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meloman_meloman_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Format); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meloman_meloman_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFormatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meloman_meloman_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Label); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meloman_meloman_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLabelsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meloman_meloman_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetArtistAlbumsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meloman_meloman_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAlbumRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meloman_meloman_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAlbumResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meloman_meloman_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTrackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meloman_meloman_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTrackResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meloman_meloman_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAlbumTracksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meloman_meloman_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAlbumTracksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meloman_meloman_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserRoleRequest_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meloman_meloman_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetArtistsResponse_Artist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meloman_meloman_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetArtistAlbumsResponse_Album); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meloman_meloman_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAlbumRequest_NewAlbum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meloman_meloman_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTrackRequest_Track); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meloman_meloman_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAlbumTracksResponse_Track); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_meloman_meloman_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_meloman_meloman_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_meloman_meloman_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_meloman_meloman_proto_msgTypes[32].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_meloman_meloman_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   35,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_meloman_meloman_proto_goTypes,
		DependencyIndexes: file_meloman_meloman_proto_depIdxs,
		EnumInfos:         file_meloman_meloman_proto_enumTypes,
		MessageInfos:      file_meloman_meloman_proto_msgTypes,
	}.Build()
	File_meloman_meloman_proto = out.File
	file_meloman_meloman_proto_rawDesc = nil
	file_meloman_meloman_proto_goTypes = nil
	file_meloman_meloman_proto_depIdxs = nil
}
